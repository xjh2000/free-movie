// tslint:disable
// noinspection ES6ShorthandObjectProperty

/**
 * free-movie
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import {Configuration} from './configuration';
import globalAxios, {AxiosInstance, AxiosPromise} from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError} from './base';

/**
 *
 * @export
 * @interface BaseError
 */
export interface BaseError {
    /**
     *
     * @type {Status}
     * @memberof BaseError
     */
    status?: Status;
    /**
     *
     * @type {string}
     * @memberof BaseError
     */
    message?: string;
    /**
     *
     * @type {string}
     * @memberof BaseError
     */
    detail?: string | null;
}

/**
 *
 * @export
 * @enum {string}
 */
export enum Status {
    CONTINUE = 'CONTINUE',
    SWITCHINGPROTOCOLS = 'SWITCHING_PROTOCOLS',
    OK = 'OK',
    CREATED = 'CREATED',
    ACCEPTED = 'ACCEPTED',
    NONAUTHORITATIVEINFORMATION = 'NON_AUTHORITATIVE_INFORMATION',
    NOCONTENT = 'NO_CONTENT',
    RESETCONTENT = 'RESET_CONTENT',
    PARTIALCONTENT = 'PARTIAL_CONTENT',
    MULTIPLECHOICES = 'MULTIPLE_CHOICES',
    MOVEDPERMANENTLY = 'MOVED_PERMANENTLY',
    FOUND = 'FOUND',
    SEEOTHER = 'SEE_OTHER',
    NOTMODIFIED = 'NOT_MODIFIED',
    USEPROXY = 'USE_PROXY',
    TEMPORARYREDIRECT = 'TEMPORARY_REDIRECT',
    PERMANENTREDIRECT = 'PERMANENT_REDIRECT',
    BADREQUEST = 'BAD_REQUEST',
    UNAUTHORIZED = 'UNAUTHORIZED',
    PAYMENTREQUIRED = 'PAYMENT_REQUIRED',
    FORBIDDEN = 'FORBIDDEN',
    NOTFOUND = 'NOT_FOUND',
    METHODNOTALLOWED = 'METHOD_NOT_ALLOWED',
    NOTACCEPTABLE = 'NOT_ACCEPTABLE',
    PROXYAUTHENTICATIONREQUIRED = 'PROXY_AUTHENTICATION_REQUIRED',
    REQUESTTIMEOUT = 'REQUEST_TIMEOUT',
    CONFLICT = 'CONFLICT',
    GONE = 'GONE',
    LENGTHREQUIRED = 'LENGTH_REQUIRED',
    PRECONDITIONFAILED = 'PRECONDITION_FAILED',
    PAYLOADTOOLARGE = 'PAYLOAD_TOO_LARGE',
    URITOOLONG = 'URI_TOO_LONG',
    UNSUPPORTEDMEDIATYPE = 'UNSUPPORTED_MEDIA_TYPE',
    REQUESTEDRANGENOTSATISFIABLE = 'REQUESTED_RANGE_NOT_SATISFIABLE',
    EXPECTATIONFAILED = 'EXPECTATION_FAILED',
    UPGRADEREQUIRED = 'UPGRADE_REQUIRED',
    PRECONDITIONREQUIRED = 'PRECONDITION_REQUIRED',
    TOOMANYREQUESTS = 'TOO_MANY_REQUESTS',
    REQUESTHEADERFIELDSTOOLARGE = 'REQUEST_HEADER_FIELDS_TOO_LARGE',
    INTERNALSERVERERROR = 'INTERNAL_SERVER_ERROR',
    NOTIMPLEMENTED = 'NOT_IMPLEMENTED',
    BADGATEWAY = 'BAD_GATEWAY',
    SERVICEUNAVAILABLE = 'SERVICE_UNAVAILABLE',
    GATEWAYTIMEOUT = 'GATEWAY_TIMEOUT',
    HTTPVERSIONNOTSUPPORTED = 'HTTP_VERSION_NOT_SUPPORTED',
    NETWORKAUTHENTICATIONREQUIRED = 'NETWORK_AUTHENTICATION_REQUIRED'
}

/**
 *
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     *
     * @type {number}
     * @memberof UserDto
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof UserDto
     */
    username?: string;
    /**
     *
     * @type {string}
     * @memberof UserDto
     */
    password?: string;
    /**
     *
     * @type {string}
     * @memberof UserDto
     */
    mail?: string | null;
    /**
     *
     * @type {Array<string>}
     * @memberof UserDto
     */
    roles?: Array<string>;
}

/**
 *
 * @export
 * @interface VideoListItem
 */
export interface VideoListItem {
    /**
     *
     * @type {number}
     * @memberof VideoListItem
     */
    episode?: number;
    /**
     *
     * @type {string}
     * @memberof VideoListItem
     */
    url?: string;
}

/**
 *
 * @export
 * @interface VideoShowDto
 */
export interface VideoShowDto {
    /**
     *
     * @type {string}
     * @memberof VideoShowDto
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof VideoShowDto
     */
    url?: string;
    /**
     *
     * @type {string}
     * @memberof VideoShowDto
     */
    poster?: string;
}

/**
 * QSearchApiApi - axios parameter creator
 * @export
 */
export const QSearchApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary /api/qSearch
         * @param {string} [title]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQSearchGet(title?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/qSearch`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }


            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            // @ts-ignore
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary /api/qSearch/list
         * @param {string} [baseUrl]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQSearchListGet(baseUrl?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/qSearch/list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (baseUrl !== undefined) {
                localVarQueryParameter['baseUrl'] = baseUrl;
            }


            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            // @ts-ignore
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QSearchApiApi - functional programming interface
 * @export
 */
export const QSearchApiApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary /api/qSearch
         * @param {string} [title]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQSearchGet(title?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<VideoShowDto> {
            const localVarAxiosArgs = QSearchApiApiAxiosParamCreator(configuration).apiQSearchGet(title, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary /api/qSearch/list
         * @param {string} [baseUrl]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQSearchListGet(baseUrl?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<VideoListItem>> {
            const localVarAxiosArgs = QSearchApiApiAxiosParamCreator(configuration).apiQSearchListGet(baseUrl, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * QSearchApiApi - factory interface
 * @export
 */
export const QSearchApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @summary /api/qSearch
         * @param {string} [title]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQSearchGet(title?: string, options?: any): AxiosPromise<VideoShowDto> {
            return QSearchApiApiFp(configuration).apiQSearchGet(title, options)(axios, basePath);
        },
        /**
         *
         * @summary /api/qSearch/list
         * @param {string} [baseUrl]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiQSearchListGet(baseUrl?: string, options?: any): AxiosPromise<Array<VideoListItem>> {
            return QSearchApiApiFp(configuration).apiQSearchListGet(baseUrl, options)(axios, basePath);
        },
    };
};

/**
 * QSearchApiApi - object-oriented interface
 * @export
 * @class QSearchApiApi
 * @extends {BaseAPI}
 */
export class QSearchApiApi extends BaseAPI {
    /**
     *
     * @summary /api/qSearch
     * @param {string} [title]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QSearchApiApi
     */
    public apiQSearchGet(title?: string, options?: any) {
        return QSearchApiApiFp(this.configuration).apiQSearchGet(title, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary /api/qSearch/list
     * @param {string} [baseUrl]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QSearchApiApi
     */
    public apiQSearchListGet(baseUrl?: string, options?: any) {
        return QSearchApiApiFp(this.configuration).apiQSearchListGet(baseUrl, options)(this.axios, this.basePath);
    }

}


/**
 * UserApiApi - axios parameter creator
 * @export
 */
export const UserApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary /api/user/destroy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserDestroyPost(options: any = {}): RequestArgs {
            const localVarPath = `/api/user/destroy`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            // @ts-ignore
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary /api/user/findById/{id}
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserFindByIdIdGet(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling apiUserFindByIdIdGet.');
            }
            const localVarPath = `/api/user/findById/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            // @ts-ignore
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary /api/user/findByUsername/{username}
         * @param {string} username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserFindByUsernameUsernameGet(username: string, options: any = {}): RequestArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username', 'Required parameter username was null or undefined when calling apiUserFindByUsernameUsernameGet.');
            }
            const localVarPath = `/api/user/findByUsername/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            // @ts-ignore
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary /api/user/getAll
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGetAllGet(options: any = {}): RequestArgs {
            const localVarPath = `/api/user/getAll`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            // @ts-ignore
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary /api/user/register
         * @param {UserDto} [userDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserRegisterPost(userDto?: UserDto, options: any = {}): RequestArgs {
            const localVarPath = `/api/user/register`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            // @ts-ignore
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof userDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(userDto !== undefined ? userDto : {}) : (userDto || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApiApi - functional programming interface
 * @export
 */
export const UserApiApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary /api/user/destroy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserDestroyPost(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = UserApiApiAxiosParamCreator(configuration).apiUserDestroyPost(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary /api/user/findById/{id}
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserFindByIdIdGet(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto> {
            const localVarAxiosArgs = UserApiApiAxiosParamCreator(configuration).apiUserFindByIdIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary /api/user/findByUsername/{username}
         * @param {string} username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserFindByUsernameUsernameGet(username: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto> {
            const localVarAxiosArgs = UserApiApiAxiosParamCreator(configuration).apiUserFindByUsernameUsernameGet(username, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary /api/user/getAll
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGetAllGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserDto>> {
            const localVarAxiosArgs = UserApiApiAxiosParamCreator(configuration).apiUserGetAllGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary /api/user/register
         * @param {UserDto} [userDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserRegisterPost(userDto?: UserDto, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto> {
            const localVarAxiosArgs = UserApiApiAxiosParamCreator(configuration).apiUserRegisterPost(userDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UserApiApi - factory interface
 * @export
 */
export const UserApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @summary /api/user/destroy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserDestroyPost(options?: any): AxiosPromise<object> {
            return UserApiApiFp(configuration).apiUserDestroyPost(options)(axios, basePath);
        },
        /**
         *
         * @summary /api/user/findById/{id}
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserFindByIdIdGet(id: string, options?: any): AxiosPromise<UserDto> {
            return UserApiApiFp(configuration).apiUserFindByIdIdGet(id, options)(axios, basePath);
        },
        /**
         *
         * @summary /api/user/findByUsername/{username}
         * @param {string} username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserFindByUsernameUsernameGet(username: string, options?: any): AxiosPromise<UserDto> {
            return UserApiApiFp(configuration).apiUserFindByUsernameUsernameGet(username, options)(axios, basePath);
        },
        /**
         *
         * @summary /api/user/getAll
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserGetAllGet(options?: any): AxiosPromise<Array<UserDto>> {
            return UserApiApiFp(configuration).apiUserGetAllGet(options)(axios, basePath);
        },
        /**
         *
         * @summary /api/user/register
         * @param {UserDto} [userDto]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUserRegisterPost(userDto?: UserDto, options?: any): AxiosPromise<UserDto> {
            return UserApiApiFp(configuration).apiUserRegisterPost(userDto, options)(axios, basePath);
        },
    };
};

/**
 * UserApiApi - object-oriented interface
 * @export
 * @class UserApiApi
 * @extends {BaseAPI}
 */
export class UserApiApi extends BaseAPI {
    /**
     *
     * @summary /api/user/destroy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiApi
     */
    public apiUserDestroyPost(options?: any) {
        return UserApiApiFp(this.configuration).apiUserDestroyPost(options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary /api/user/findById/{id}
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiApi
     */
    public apiUserFindByIdIdGet(id: string, options?: any) {
        return UserApiApiFp(this.configuration).apiUserFindByIdIdGet(id, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary /api/user/findByUsername/{username}
     * @param {string} username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiApi
     */
    public apiUserFindByUsernameUsernameGet(username: string, options?: any) {
        return UserApiApiFp(this.configuration).apiUserFindByUsernameUsernameGet(username, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary /api/user/getAll
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiApi
     */
    public apiUserGetAllGet(options?: any) {
        return UserApiApiFp(this.configuration).apiUserGetAllGet(options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary /api/user/register
     * @param {UserDto} [userDto]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiApi
     */
    public apiUserRegisterPost(userDto?: UserDto, options?: any) {
        return UserApiApiFp(this.configuration).apiUserRegisterPost(userDto, options)(this.axios, this.basePath);
    }

}


