// tslint:disable
// noinspection ES6ShorthandObjectProperty

/**
 * free-movie
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface CurrentUser
 */
export interface CurrentUser {
    /**
     *
     * @type {string}
     * @memberof CurrentUser
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof CurrentUser
     */
    avatar?: string;
    /**
     *
     * @type {string}
     * @memberof CurrentUser
     */
    userid?: string;
    /**
     *
     * @type {string}
     * @memberof CurrentUser
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof CurrentUser
     */
    signature?: string;
    /**
     *
     * @type {string}
     * @memberof CurrentUser
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof CurrentUser
     */
    group?: string;
    /**
     *
     * @type {Array<CurrentUserTags>}
     * @memberof CurrentUser
     */
    tags?: Array<CurrentUserTags>;
    /**
     *
     * @type {number}
     * @memberof CurrentUser
     */
    notifyCount?: number;
    /**
     *
     * @type {number}
     * @memberof CurrentUser
     */
    unreadCount?: number;
    /**
     *
     * @type {string}
     * @memberof CurrentUser
     */
    country?: string;
    /**
     *
     * @type {string}
     * @memberof CurrentUser
     */
    access?: string;
    /**
     *
     * @type {CurrentUserGeographic}
     * @memberof CurrentUser
     */
    geographic?: CurrentUserGeographic;
    /**
     *
     * @type {string}
     * @memberof CurrentUser
     */
    address?: string;
    /**
     *
     * @type {string}
     * @memberof CurrentUser
     */
    phone?: string;
}
/**
 *
 * @export
 * @interface CurrentUserGeographic
 */
export interface CurrentUserGeographic {
    /**
     *
     * @type {CurrentUserGeographicProvince}
     * @memberof CurrentUserGeographic
     */
    province?: CurrentUserGeographicProvince;
    /**
     *
     * @type {CurrentUserGeographicProvince}
     * @memberof CurrentUserGeographic
     */
    city?: CurrentUserGeographicProvince;
}
/**
 *
 * @export
 * @interface CurrentUserGeographicProvince
 */
export interface CurrentUserGeographicProvince {
    /**
     *
     * @type {string}
     * @memberof CurrentUserGeographicProvince
     */
    label?: string;
    /**
     *
     * @type {string}
     * @memberof CurrentUserGeographicProvince
     */
    key?: string;
}
/**
 *
 * @export
 * @interface CurrentUserTags
 */
export interface CurrentUserTags {
    /**
     *
     * @type {string}
     * @memberof CurrentUserTags
     */
    key?: string;
    /**
     *
     * @type {string}
     * @memberof CurrentUserTags
     */
    label?: string;
}
/**
 *
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 业务约定的错误码
     * @type {string}
     * @memberof ErrorResponse
     */
    errorCode: string;
    /**
     * 业务上的错误信息
     * @type {string}
     * @memberof ErrorResponse
     */
    errorMessage?: string;
    /**
     * 业务上的请求是否成功
     * @type {boolean}
     * @memberof ErrorResponse
     */
    success?: boolean;
}
/**
 *
 * @export
 * @interface FakeCaptcha
 */
export interface FakeCaptcha {
    /**
     *
     * @type {number}
     * @memberof FakeCaptcha
     */
    code?: number;
    /**
     *
     * @type {string}
     * @memberof FakeCaptcha
     */
    status?: string;
}
/**
 *
 * @export
 * @interface LoginParams
 */
export interface LoginParams {
    /**
     *
     * @type {string}
     * @memberof LoginParams
     */
    username?: string;
    /**
     *
     * @type {string}
     * @memberof LoginParams
     */
    password?: string;
    /**
     *
     * @type {boolean}
     * @memberof LoginParams
     */
    autoLogin?: boolean;
    /**
     *
     * @type {string}
     * @memberof LoginParams
     */
    type?: string;
}
/**
 *
 * @export
 * @interface LoginResult
 */
export interface LoginResult {
    /**
     *
     * @type {string}
     * @memberof LoginResult
     */
    status?: string;
    /**
     *
     * @type {string}
     * @memberof LoginResult
     */
    type?: string;
    /**
     *
     * @type {string}
     * @memberof LoginResult
     */
    currentAuthority?: string;
}
/**
 *
 * @export
 * @interface NoticeIconItem
 */
export interface NoticeIconItem {
    /**
     *
     * @type {string}
     * @memberof NoticeIconItem
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof NoticeIconItem
     */
    extra?: string;
    /**
     *
     * @type {string}
     * @memberof NoticeIconItem
     */
    key?: string;
    /**
     *
     * @type {boolean}
     * @memberof NoticeIconItem
     */
    read?: boolean;
    /**
     *
     * @type {string}
     * @memberof NoticeIconItem
     */
    avatar?: string;
    /**
     *
     * @type {string}
     * @memberof NoticeIconItem
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof NoticeIconItem
     */
    status?: string;
    /**
     *
     * @type {string}
     * @memberof NoticeIconItem
     */
    datetime?: string;
    /**
     *
     * @type {string}
     * @memberof NoticeIconItem
     */
    description?: string;
    /**
     *
     * @type {NoticeIconItemType}
     * @memberof NoticeIconItem
     */
    type?: NoticeIconItemType;
}
/**
 * 已读未读列表的枚举
 * @export
 * @enum {string}
 */
export enum NoticeIconItemType {
    Notification = 'notification',
    Message = 'message',
    Event = 'event'
}

/**
 *
 * @export
 * @interface NoticeIconList
 */
export interface NoticeIconList {
    /**
     *
     * @type {Array<NoticeIconItem>}
     * @memberof NoticeIconList
     */
    data?: Array<NoticeIconItem>;
    /**
     * 列表的内容总数
     * @type {number}
     * @memberof NoticeIconList
     */
    total?: number;
    /**
     *
     * @type {boolean}
     * @memberof NoticeIconList
     */
    success?: boolean;
}
/**
 *
 * @export
 * @interface PageParams
 */
export interface PageParams {
    /**
     *
     * @type {number}
     * @memberof PageParams
     */
    current?: number;
    /**
     *
     * @type {number}
     * @memberof PageParams
     */
    pageSize?: number;
}
/**
 *
 * @export
 * @interface RuleList
 */
export interface RuleList {
    /**
     *
     * @type {Array<RuleListItem>}
     * @memberof RuleList
     */
    data?: Array<RuleListItem>;
    /**
     * 列表的内容总数
     * @type {number}
     * @memberof RuleList
     */
    total?: number;
    /**
     *
     * @type {boolean}
     * @memberof RuleList
     */
    success?: boolean;
}
/**
 *
 * @export
 * @interface RuleListItem
 */
export interface RuleListItem {
    /**
     *
     * @type {number}
     * @memberof RuleListItem
     */
    key?: number;
    /**
     *
     * @type {boolean}
     * @memberof RuleListItem
     */
    disabled?: boolean;
    /**
     *
     * @type {string}
     * @memberof RuleListItem
     */
    href?: string;
    /**
     *
     * @type {string}
     * @memberof RuleListItem
     */
    avatar?: string;
    /**
     *
     * @type {string}
     * @memberof RuleListItem
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof RuleListItem
     */
    owner?: string;
    /**
     *
     * @type {string}
     * @memberof RuleListItem
     */
    desc?: string;
    /**
     *
     * @type {number}
     * @memberof RuleListItem
     */
    callNo?: number;
    /**
     *
     * @type {number}
     * @memberof RuleListItem
     */
    status?: number;
    /**
     *
     * @type {string}
     * @memberof RuleListItem
     */
    updatedAt?: string;
    /**
     *
     * @type {string}
     * @memberof RuleListItem
     */
    createdAt?: string;
    /**
     *
     * @type {number}
     * @memberof RuleListItem
     */
    progress?: number;
}

/**
 * ApiApi - axios parameter creator
 * @export
 */
export const ApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 获取当前的用户
         * @summary /api/currentUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentUser(options: any = {}): RequestArgs {
            const localVarPath = `/api/currentUser`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            // @ts-ignore
          delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary /api/notices
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotices(options: any = {}): RequestArgs {
            const localVarPath = `/api/notices`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            // @ts-ignore
          delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiApi - functional programming interface
 * @export
 */
export const ApiApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 获取当前的用户
         * @summary /api/currentUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentUser(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CurrentUser> {
            const localVarAxiosArgs = ApiApiAxiosParamCreator(configuration).currentUser(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary /api/notices
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotices(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NoticeIconList> {
            const localVarAxiosArgs = ApiApiAxiosParamCreator(configuration).getNotices(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ApiApi - factory interface
 * @export
 */
export const ApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 获取当前的用户
         * @summary /api/currentUser
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentUser(options?: any): AxiosPromise<CurrentUser> {
            return ApiApiFp(configuration).currentUser(options)(axios, basePath);
        },
        /**
         *
         * @summary /api/notices
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotices(options?: any): AxiosPromise<NoticeIconList> {
            return ApiApiFp(configuration).getNotices(options)(axios, basePath);
        },
    };
};

/**
 * ApiApi - object-oriented interface
 * @export
 * @class ApiApi
 * @extends {BaseAPI}
 */
export class ApiApi extends BaseAPI {
    /**
     * 获取当前的用户
     * @summary /api/currentUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public currentUser(options?: any) {
        return ApiApiFp(this.configuration).currentUser(options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary /api/notices
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public getNotices(options?: any) {
        return ApiApiFp(this.configuration).getNotices(options)(this.axios, this.basePath);
    }

}


/**
 * LoginApi - axios parameter creator
 * @export
 */
export const LoginApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 发送验证码
         * @summary /api/login/captcha
         * @param {string} [phone] 手机号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFakeCaptcha(phone?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/login/captcha`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (phone !== undefined) {
                localVarQueryParameter['phone'] = phone;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            // @ts-ignore
          delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 登录接口
         * @summary /api/login/account
         * @param {LoginParams} [loginParams]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginParams?: LoginParams, options: any = {}): RequestArgs {
            const localVarPath = `/api/login/account`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            // @ts-ignore
          delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof loginParams !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(loginParams !== undefined ? loginParams : {}) : (loginParams || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 登录接口
         * @summary /api/login/outLogin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        outLogin(options: any = {}): RequestArgs {
            const localVarPath = `/api/login/outLogin`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            // @ts-ignore
          delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoginApi - functional programming interface
 * @export
 */
export const LoginApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 发送验证码
         * @summary /api/login/captcha
         * @param {string} [phone] 手机号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFakeCaptcha(phone?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FakeCaptcha> {
            const localVarAxiosArgs = LoginApiAxiosParamCreator(configuration).getFakeCaptcha(phone, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 登录接口
         * @summary /api/login/account
         * @param {LoginParams} [loginParams]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginParams?: LoginParams, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResult> {
            const localVarAxiosArgs = LoginApiAxiosParamCreator(configuration).login(loginParams, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 登录接口
         * @summary /api/login/outLogin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        outLogin(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = LoginApiAxiosParamCreator(configuration).outLogin(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LoginApi - factory interface
 * @export
 */
export const LoginApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 发送验证码
         * @summary /api/login/captcha
         * @param {string} [phone] 手机号
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFakeCaptcha(phone?: string, options?: any): AxiosPromise<FakeCaptcha> {
            return LoginApiFp(configuration).getFakeCaptcha(phone, options)(axios, basePath);
        },
        /**
         * 登录接口
         * @summary /api/login/account
         * @param {LoginParams} [loginParams]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginParams?: LoginParams, options?: any): AxiosPromise<LoginResult> {
            return LoginApiFp(configuration).login(loginParams, options)(axios, basePath);
        },
        /**
         * 登录接口
         * @summary /api/login/outLogin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        outLogin(options?: any): AxiosPromise<object> {
            return LoginApiFp(configuration).outLogin(options)(axios, basePath);
        },
    };
};

/**
 * LoginApi - object-oriented interface
 * @export
 * @class LoginApi
 * @extends {BaseAPI}
 */
export class LoginApi extends BaseAPI {
    /**
     * 发送验证码
     * @summary /api/login/captcha
     * @param {string} [phone] 手机号
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public getFakeCaptcha(phone?: string, options?: any) {
        return LoginApiFp(this.configuration).getFakeCaptcha(phone, options)(this.axios, this.basePath);
    }

    /**
     * 登录接口
     * @summary /api/login/account
     * @param {LoginParams} [loginParams]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public login(loginParams?: LoginParams, options?: any) {
        return LoginApiFp(this.configuration).login(loginParams, options)(this.axios, this.basePath);
    }

    /**
     * 登录接口
     * @summary /api/login/outLogin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public outLogin(options?: any) {
        return LoginApiFp(this.configuration).outLogin(options)(this.axios, this.basePath);
    }

}


/**
 * RuleApi - axios parameter creator
 * @export
 */
export const RuleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 新建规则
         * @summary /api/rule
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRule(options: any = {}): RequestArgs {
            const localVarPath = `/api/rule`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            // @ts-ignore
          delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 删除规则
         * @summary /api/rule
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeRule(options: any = {}): RequestArgs {
            const localVarPath = `/api/rule`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            // @ts-ignore
          delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取规则列表
         * @summary /api/rule
         * @param {string} [current] 当前的页码
         * @param {string} [pageSize] 页面的容量
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rule(current?: string, pageSize?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/rule`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            // @ts-ignore
          delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新建规则
         * @summary /api/rule
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRule(options: any = {}): RequestArgs {
            const localVarPath = `/api/rule`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            // @ts-ignore
          delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RuleApi - functional programming interface
 * @export
 */
export const RuleApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 新建规则
         * @summary /api/rule
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRule(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RuleListItem> {
            const localVarAxiosArgs = RuleApiAxiosParamCreator(configuration).addRule(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 删除规则
         * @summary /api/rule
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeRule(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = RuleApiAxiosParamCreator(configuration).removeRule(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 获取规则列表
         * @summary /api/rule
         * @param {string} [current] 当前的页码
         * @param {string} [pageSize] 页面的容量
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rule(current?: string, pageSize?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RuleList> {
            const localVarAxiosArgs = RuleApiAxiosParamCreator(configuration).rule(current, pageSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 新建规则
         * @summary /api/rule
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRule(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RuleListItem> {
            const localVarAxiosArgs = RuleApiAxiosParamCreator(configuration).updateRule(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RuleApi - factory interface
 * @export
 */
export const RuleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 新建规则
         * @summary /api/rule
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addRule(options?: any): AxiosPromise<RuleListItem> {
            return RuleApiFp(configuration).addRule(options)(axios, basePath);
        },
        /**
         * 删除规则
         * @summary /api/rule
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeRule(options?: any): AxiosPromise<object> {
            return RuleApiFp(configuration).removeRule(options)(axios, basePath);
        },
        /**
         * 获取规则列表
         * @summary /api/rule
         * @param {string} [current] 当前的页码
         * @param {string} [pageSize] 页面的容量
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rule(current?: string, pageSize?: string, options?: any): AxiosPromise<RuleList> {
            return RuleApiFp(configuration).rule(current, pageSize, options)(axios, basePath);
        },
        /**
         * 新建规则
         * @summary /api/rule
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRule(options?: any): AxiosPromise<RuleListItem> {
            return RuleApiFp(configuration).updateRule(options)(axios, basePath);
        },
    };
};

/**
 * RuleApi - object-oriented interface
 * @export
 * @class RuleApi
 * @extends {BaseAPI}
 */
export class RuleApi extends BaseAPI {
    /**
     * 新建规则
     * @summary /api/rule
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RuleApi
     */
    public addRule(options?: any) {
        return RuleApiFp(this.configuration).addRule(options)(this.axios, this.basePath);
    }

    /**
     * 删除规则
     * @summary /api/rule
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RuleApi
     */
    public removeRule(options?: any) {
        return RuleApiFp(this.configuration).removeRule(options)(this.axios, this.basePath);
    }

    /**
     * 获取规则列表
     * @summary /api/rule
     * @param {string} [current] 当前的页码
     * @param {string} [pageSize] 页面的容量
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RuleApi
     */
    public rule(current?: string, pageSize?: string, options?: any) {
        return RuleApiFp(this.configuration).rule(current, pageSize, options)(this.axios, this.basePath);
    }

    /**
     * 新建规则
     * @summary /api/rule
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RuleApi
     */
    public updateRule(options?: any) {
        return RuleApiFp(this.configuration).updateRule(options)(this.axios, this.basePath);
    }

}


